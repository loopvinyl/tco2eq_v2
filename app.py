import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import seaborn as sns
from scipy import stats
from scipy.signal import fftconvolve
from joblib import Parallel, delayed
import warnings
from matplotlib.ticker import FuncFormatter
from SALib.sample.sobol import sample
from SALib.analyze.sobol import analyze

# Tentar importar yfinance com fallback
try:
    import yfinance as yf
    YFINANCE_AVAILABLE = True
except ImportError:
    YFINANCE_AVAILABLE = False
    st.warning("‚ö†Ô∏è yfinance n√£o est√° instalado. Use: `pip install yfinance`")

np.random.seed(50)  # Garante reprodutibilidade

# Configura√ß√µes iniciais
st.set_page_config(page_title="Simulador de Emiss√µes CO‚ÇÇeq", layout="wide")
warnings.filterwarnings("ignore", category=FutureWarning)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
np.seterr(divide='ignore', invalid='ignore')
plt.rcParams['figure.dpi'] = 150
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

# T√≠tulo do aplicativo
st.title("Simulador de Emiss√µes de tCO‚ÇÇeq")
st.markdown("""
Esta ferramenta calcula as emiss√µes de gases de efeito estufa para dois contextos de gest√£o de res√≠duos,
aterro sanit√°rio vs. vermicompostagem (Contexto: Proposta da Tese) e aterro sanit√°rio vs. compostagem (Contexto: UNFCCC).
""")

# =============================================================================
# FUN√á√ïES DE COTA√á√ÉO AUTOM√ÅTICA DO CARBONO E C√ÇMBIO
# =============================================================================

def obter_ticker_carbono_atual():
    """
    Determina automaticamente o ticker do contrato futuro de carbono mais relevante
    """
    ano_atual = datetime.now().year
    mes_atual = datetime.now().month
    
    # L√≥gica: a partir de setembro, come√ßa a migrar para o pr√≥ximo ano
    if mes_atual >= 9:
        ano_contrato = ano_atual + 1
    else:
        ano_contrato = ano_atual
    
    # Formata o ano para 2 d√≠gitos (25, 26, etc.)
    ano_2_digitos = str(ano_contrato)[-2:]
    
    ticker = f'CO2Z{ano_2_digitos}.NYB'
    return ticker, ano_contrato

def obter_cotacao_carbono():
    """
    Obt√©m a cota√ß√£o em tempo real do contrato futuro de carbono atual
    """
    if not YFINANCE_AVAILABLE:
        ticker_atual, ano_contrato = obter_ticker_carbono_atual()
        return 85.50, "‚Ç¨", f"EUA Carbon Dec {ano_contrato} (yfinance n√£o dispon√≠vel)", False
    
    try:
        # Obt√©m o ticker atual automaticamente
        ticker_atual, ano_contrato = obter_ticker_carbono_atual()
        ano_2_digitos = str(ano_contrato)[-2:]
        
        simbolos_tentativas = [
            ticker_atual,                    # Contrato atual (ex: CO2Z25.NYB)
            f'CFIZ{ano_2_digitos}.NYB',     # Alternativa com mesmo ano
            'CARBON-FUTURE',                # Gen√©rico
        ]
        
        cotacao = None
        simbolo_usado = None
        
        for simbolo in simbolos_tentativas:
            try:
                ticker = yf.Ticker(simbolo)
                hist = ticker.history(period='1d')
                
                if not hist.empty and not pd.isna(hist['Close'].iloc[-1]):
                    cotacao = hist['Close'].iloc[-1]
                    simbolo_usado = simbolo
                    break
                    
            except Exception as e:
                continue
        
        if cotacao is None:
            # Fallback para dados de exemplo
            return 85.50, "‚Ç¨", f"EUA Carbon Dec {ano_contrato} (Refer√™ncia)", False
        
        return cotacao, "‚Ç¨", f"EUA Carbon Futures Dec {ano_contrato}", True
        
    except Exception as e:
        ticker_atual, ano_contrato = obter_ticker_carbono_atual()
        return 85.50, "‚Ç¨", f"EUA Carbon Dec {ano_contrato} (Erro: {str(e)})", False

def obter_cotacao_euro_real():
    """
    Obt√©m a cota√ß√£o em tempo real do Euro em rela√ß√£o ao Real Brasileiro
    """
    if not YFINANCE_AVAILABLE:
        return 5.50, "R$", False
    
    try:
        # Ticker para EUR/BRL (Euro para Real Brasileiro)
        ticker = yf.Ticker("EURBRL=X")
        hist = ticker.history(period='1d')
        
        if not hist.empty and not pd.isna(hist['Close'].iloc[-1]):
            cotacao = hist['Close'].iloc[-1]
            return cotacao, "R$", True
        else:
            # Fallback para valor de refer√™ncia
            return 5.50, "R$", False
            
    except Exception as e:
        return 5.50, "R$", False

def calcular_valor_creditos(emissoes_evitadas_tco2eq, preco_carbono_por_tonelada, moeda, taxa_cambio=1):
    """
    Calcula o valor financeiro das emiss√µes evitadas baseado no pre√ßo do carbono
    """
    valor_total = emissoes_evitadas_tco2eq * preco_carbono_por_tonelada * taxa_cambio
    return valor_total

def exibir_cotacao_carbono():
    """
    Exibe a cota√ß√£o do carbono com informa√ß√µes sobre o contrato atual
    """
    st.sidebar.header("üí∞ Mercado de Carbono e C√¢mbio")
    
    if not YFINANCE_AVAILABLE:
        st.sidebar.warning("‚ö†Ô∏è **yfinance n√£o instalado**")
        st.sidebar.info("Para cota√ß√µes em tempo real, execute:")
        st.sidebar.code("pip install yfinance")
    
    if st.sidebar.button("üîÑ Atualizar Cota√ß√µes"):
        st.session_state.cotacao_atualizada = True

    # Obt√©m informa√ß√µes do contrato atual
    ticker_atual, ano_contrato = obter_ticker_carbono_atual()
    
    if st.session_state.get('cotacao_atualizada', False):
        with st.sidebar.spinner('Obtendo cota√ß√µes...'):
            # Obter cota√ß√£o do carbono
            preco_carbono, moeda, contrato_info, sucesso_carbono = obter_cotacao_carbono()
            
            # Obter cota√ß√£o do Euro
            preco_euro, moeda_real, sucesso_euro = obter_cotacao_euro_real()
            
            if sucesso_carbono:
                st.sidebar.success(f"**{contrato_info}**")
            else:
                st.sidebar.info(f"**{contrato_info}**")
            
            if sucesso_euro:
                st.sidebar.success(f"**EUR/BRL Atualizado**")
            else:
                st.sidebar.info(f"**EUR/BRL Refer√™ncia**")
            
            st.session_state.preco_carbono = preco_carbono
            st.session_state.moeda_carbono = moeda
            st.session_state.contrato_info = contrato_info
            st.session_state.taxa_cambio = preco_euro
            st.session_state.moeda_real = moeda_real
            st.session_state.ano_contrato = ano_contrato  # Armazena o ano atual
    else:
        # Valores padr√£o iniciais
        if 'preco_carbono' not in st.session_state:
            st.session_state.preco_carbono = 85.50
            st.session_state.moeda_carbono = "‚Ç¨"
            st.session_state.contrato_info = f"EUA Carbon Dec {ano_contrato}"
            st.session_state.taxa_cambio = 5.50
            st.session_state.moeda_real = "R$"
            st.session_state.ano_contrato = ano_contrato  # Armazena o ano atual

    # Exibe cota√ß√£o atual do carbono
    st.sidebar.metric(
        label=f"Carbon Dec {st.session_state.ano_contrato} (tCO‚ÇÇeq)",
        value=f"{st.session_state.moeda_carbono} {st.session_state.preco_carbono:.2f}",
        help=f"Contrato futuro com vencimento Dezembro {st.session_state.ano_contrato}"
    )
    
    # Exibe cota√ß√£o atual do Euro
    st.sidebar.metric(
        label="Euro (EUR/BRL)",
        value=f"{st.session_state.moeda_real} {st.session_state.taxa_cambio:.2f}",
        help="Cota√ß√£o do Euro em Reais Brasileiros"
    )
    
    # Calcular pre√ßo do carbono em Reais
    preco_carbono_reais = st.session_state.preco_carbono * st.session_state.taxa_cambio
    
    st.sidebar.metric(
        label=f"Carbon Dec {st.session_state.ano_contrato} (R$/tCO‚ÇÇeq)",
        value=f"R$ {preco_carbono_reais:.2f}",
        help="Pre√ßo do carbono convertido para Reais Brasileiros"
    )
    
    # Informa√ß√µes adicionais
    with st.sidebar.expander("üìÖ Sobre os Vencimentos e C√¢mbio"):
        st.markdown(f"""
        **Contrato Atual:** Dec {st.session_state.ano_contrato}
        **Ticker:** `{ticker_atual}`
        
        **C√¢mbio Atual:**
        - 1 Euro = R$ {st.session_state.taxa_cambio:.2f}
        - Carbon em Reais: R$ {preco_carbono_reais:.2f}/tCO‚ÇÇeq
        
        **Ciclo dos Contratos:**
        - Dez 2024 ‚Üí CO2Z24.NYB
        - Dez 2025 ‚Üí CO2Z25.NYB  
        - Dez 2026 ‚Üí CO2Z26.NYB
        - Dez 2027 ‚Üí CO2Z27.NYB
        
        **Migra√ß√£o Autom√°tica:**
        - A partir de Setembro: prepara para pr√≥ximo ano
        - O app ajusta automaticamente
        - Sem necessidade de atualiza√ß√£o manual
        """)

# =============================================================================
# FUN√á√ïES ORIGINAIS DO SEU SCRIPT (MANTIDAS)
# =============================================================================

# [TODO: COLE AQUI TODAS AS SUAS FUN√á√ïES ORIGINAIS, DESDE formatar_br AT√â executar_simulacao_unfccc]

# =============================================================================
# EXECU√á√ÉO DA SIMULA√á√ÉO - PARTE MODIFICADA
# =============================================================================

# Executar simula√ß√£o quando solicitado
if st.session_state.get('run_simulation', False):
    with st.spinner('Executando simula√ß√£o...'):
        # [TODO: COLE AQUI TODO O SEU C√ìDIGO DE SIMULA√á√ÉO ORIGINAL]
        
        # =============================================================================
        # EXIBI√á√ÉO DOS RESULTADOS COM COTA√á√ÉO DO CARBONO E REAL - PARTE CORRIGIDA
        # =============================================================================

        # Exibir resultados
        st.header("Resultados da Simula√ß√£o")
        
        # Obter valores totais
        total_evitado_tese = df['Reducao_tCO2eq_acum'].iloc[-1]
        total_evitado_unfccc = df_comp_anual_revisado['Cumulative reduction (t CO‚ÇÇeq)'].iloc[-1]
        
        # Obter pre√ßo do carbono e taxa de c√¢mbio da session state
        preco_carbono = st.session_state.preco_carbono
        moeda = st.session_state.moeda_carbono
        taxa_cambio = st.session_state.taxa_cambio
        ano_contrato = st.session_state.ano_contrato  # Usa o ano armazenado
        
        # Calcular valores financeiros em Euros
        valor_tese_eur = calcular_valor_creditos(total_evitado_tese, preco_carbono, moeda)
        valor_unfccc_eur = calcular_valor_creditos(total_evitado_unfccc, preco_carbono, moeda)
        
        # Calcular valores financeiros em Reais
        valor_tese_brl = calcular_valor_creditos(total_evitado_tese, preco_carbono, "R$", taxa_cambio)
        valor_unfccc_brl = calcular_valor_creditos(total_evitado_unfccc, preco_carbono, "R$", taxa_cambio)
        
        # NOVA SE√á√ÉO: VALOR FINANCEIRO DAS EMISS√ïES EVITADAS
        st.subheader("üí∞ Valor Financeiro das Emiss√µes Evitadas")
        
        if not YFINANCE_AVAILABLE:
            st.warning("‚ö†Ô∏è **Cota√ß√µes em modo offline** - Instale yfinance para valores em tempo real")
        
        # Primeira linha: Euros
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                f"Pre√ßo Carbon Dec {ano_contrato} (Euro)", 
                f"{moeda} {preco_carbono:.2f}/tCO‚ÇÇeq",
                help=f"Cota√ß√£o do contrato futuro para Dezembro {ano_contrato}"
            )
        with col2:
            st.metric(
                "Valor Tese (Euro)", 
                f"{moeda} {formatar_br(valor_tese_eur)}",
                help=f"Baseado em {formatar_br(total_evitado_tese)} tCO‚ÇÇeq evitadas"
            )
        with col3:
            st.metric(
                "Valor UNFCCC (Euro)", 
                f"{moeda} {formatar_br(valor_unfccc_eur)}",
                help=f"Baseado em {formatar_br(total_evitado_unfccc)} tCO‚ÇÇeq evitadas"
            )
        
        # Segunda linha: Reais
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                f"Pre√ßo Carbon Dec {ano_contrato} (Real)", 
                f"R$ {formatar_br(preco_carbono * taxa_cambio)}/tCO‚ÇÇeq",
                help="Pre√ßo do carbono convertido para Reais"
            )
        with col2:
            st.metric(
                "Valor Tese (Real)", 
                f"R$ {formatar_br(valor_tese_brl)}",
                help=f"Baseado em {formatar_br(total_evitado_tese)} tCO‚ÇÇeq evitadas"
            )
        with col3:
            st.metric(
                "Valor UNFCCC (Real)", 
                f"R$ {formatar_br(valor_unfccc_brl)}",
                help=f"Baseado em {formatar_br(total_evitado_unfccc)} tCO‚ÇÇeq evitadas"
            )
        
        # Explica√ß√£o sobre compra e venda
        with st.expander("üí° Como funciona a comercializa√ß√£o no mercado de carbono?"):
            st.markdown(f"""
            **Para o Carbon Dec {ano_contrato}:**
            - **Pre√ßo em Euro:** {moeda} {preco_carbono:.2f}/tCO‚ÇÇeq
            - **Pre√ßo em Real:** R$ {formatar_br(preco_carbono * taxa_cambio)}/tCO‚ÇÇeq
            - **Taxa de c√¢mbio:** 1 Euro = R$ {taxa_cambio:.2f}
            
            **üìà Comprar cr√©ditos (compensa√ß√£o):**
            - Custo em Euro: **{moeda} {formatar_br(valor_tese_eur)}**
            - Custo em Real: **R$ {formatar_br(valor_tese_brl)}**
            
            **üìâ Vender cr√©ditos (comercializa√ß√£o):**  
            - Receita em Euro: **{moeda} {formatar_br(valor_tese_eur)}**
            - Receita em Real: **R$ {formatar_br(valor_tese_brl)}**
            
            **Contrato Carbon Dec {ano_contrato}:**
            - Cada contrato = 1.000 tCO‚ÇÇeq
            - Vencimento: Dezembro {ano_contrato}
            - Mercado: ICE Exchange
            - Moeda original: Euros (‚Ç¨)
            - Ticker no Yahoo Finance: `CO2Z{str(ano_contrato)[-2:]}.NYB`
            """)
        
        # [TODO: O RESTO DO SEU C√ìDIGO ORIGINAL PERMANECE AQUI]

else:
    st.info("Ajuste os par√¢metros na barra lateral e clique em 'Executar Simula√ß√£o' para ver os resultados.")

# Rodap√©
st.markdown("---")
st.markdown("""
**Refer√™ncias por Cen√°rio:**

**Cen√°rio de Baseline (Aterro Sanit√°rio):**
- IPCC (2006). Guidelines for National Greenhouse Gas Inventories.
- UNFCCC (2016). Tool to determine methane emissions from solid waste disposal sites.
- Wang et al. (2017). Nitrous oxide emissions from landfills.
- Feng et al. (2020). Emissions from pre-disposal organic waste.

**Proposta da Tese (Vermicompostagem):**
- Yang et al. (2017). Greenhouse gas emissions from vermicomposting.

**Cen√°rio UNFCCC (Compostagem):**
- UNFCCC (2012). AMS-III.F - Methodology for compostage.
- Yang et al. (2017). Greenhouse gas emissions from thermophilic composting.
""")
